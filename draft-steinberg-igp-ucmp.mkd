---
title: Computing Unequal Cost Multipath (UCMP) Weights in Link-State IGP Protocols
abbrev: I-D
docname: draft-steinberg-igp-ucmp-00
date: 2016-12-15
ipr: trust200902
category: info
area: Routing
wg: Routing Area Working Group
kw: Internet-Draft

author:
  -
    ins: D. Steinberg
    name: Dirk Steinberg
    organization: Steinberg Consulting
    street: Ringstr. 2
    city: Buchholz
    code: D-53567
    country: Germany
    email: dws@steinbergnet.net
#   phone: +49-160-8551949

pi: [toc, sortrefs, symrefs, compact, comments]

normative:
  RFC2119:
  ISO-10589:
    target: "http://www.iso.org/iso/iso_catalogue/
             catalogue_tc/catalogue_detail.htm?csnumber=30932"
    title: Intermediate System to Intermediate System intra-domain
	       routeing information exchange protocol for use in
		   conjunction with the protocol for providing the
		   connectionless-mode network service (ISO 8473)
    author:
      -
        ins: ISO
        name: ISO
        org: ISO
    date: 2002
    seriesinfo:
      "ISO": "International Standard 10589:2002, Second Edition"

informative:
  RFC5305:
  RFC3630:
  RFC1195:
  RFC2328:
  RFC5304:
  RFC3209:

--- abstract

Large service provider networks typically rely heavily on using
multiple parallel links and parallel paths in the network topology to
achieve the desired bandwidth capacities and levels of redundancy. In
order to be able to use these multipath resources efficiently they
rely on Equal Cost Multipath (ECMP) routing in the underlying Interior
Gateway Protocol (ISIS or OSPF).  If these different paths through the
network are not equal and are of different bandwidth, ECMP will not
deliver optimal load distribution and can in fact cause traffic loss.

This document proposes a method by which unequal weights can be
computed for these paths based on actual link bandwidth, changing the
load distribution mechanism of the routers from ECMP to Unequal Cost
Multipath (UCMP). This weight computation is based entirely on
information available within the Link-State IGP.

--- middle

Introduction   {#intro}
============

Large service provider networks typically rely heavily on using
multiple parallel links and parallel paths in the network topology to
achieve the desired bandwidth capacities and levels of redundancy. In
order to be able to use these multipath resources efficiently they
rely on Equal Cost Multipath (ECMP) routing in the underlying Interior
Gateway Protocol (IGP) (ISIS {{ISO-10589}}, {{RFC1195}} or OSPF {{RFC2328}}).

This works fairly well -- as long as the different paths are truly equal
from a bandwidth perspective -- because ECMP (as its name implies) is
designed for equal paths.  The problem occurs when the different
paths through the network are in fact not equal and are of different
bandwidth.

In this case ECMP will not deliver optimal load distribution. In fact
this may result in loss of traffic due to overload on specific links
even if the total available capacity would be sufficient to carry all
traffic without loss.

There can be many reasons why paths might not be equal: one or more
links in a bundle of links may have failed, or the physical rollout of
links in the network was simply not possible in exactly symmetrical
fashion due to economic or availability constraints. Emerging
technology for optical transmission might even dynamically alter the
actual transmission rate based on the properties of the optical
transmission channel (i.e. optical SNR). For example, an optical
transponder for 400 Gpbs might reduce the transmission rate to only
300 Gbps because optical restauration rerouted to a much longer
optical path, forcing the transceiver to change to a different
encoding and/or FEC to compensate for the longer distance.

This document proposes a method by which unequal weights can be computed
for these paths based on actual link bandwidth, changing the load
distribution mechanism of the routers from ECMP to Unequal Cost
Multipath (UCMP). This weight computation happens entirely based on
information available within the Link-State IGP. Note that the IGP
path computation using Dijkstra's Shortest Path First (SPF) algorithm
itself is not changed, i.e. the route selection of the IGP (the chosen
set of multipath next-hops) is not modified, just the weigthing of the
paths.

Requirements Language
------------------------

In this document, the key words "MUST", "MUST NOT", "REQUIRED",
"SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY",
and "OPTIONAL" are to be interpreted as described in BCP 14, RFC 2119
{{RFC2119}}.

Objective
=========

The objective of this proposal is to find among the set of forwarding
next-hops elected by the IGP (ECMP set) for a given destination
address corresponding weights for each next-hop such that the load
distribution is optimal for the entire mutipath graph from the ingress
to the egress in question. Optimality in this context is defined as
being able to utilize the maximum amount of bandwidth without incuring
packet loss that is possible in the given network graph without
resorting to traffic engineering via not-best paths, i.e. while still
following the multipath Shortest Path Tree (SPT) to that destination.

In the following discussion the egress node in the IGP link-state
graph is considered instead of the actual destination adress, since
all address prefixes in link-state IGPs are attached to a node in the
link-state topology anyway, rendering all prefixes attached to such a
node equivalent from the point of view of path selection.

Each pair of [ingress, egress] nodes is considered in isolation, no
attempt is made to account for bandwidth consumed by other flows in
the network. This means that the result of the weight computation will
not result in a globally optimal distribution of traffic for any
real-world traffic matrix. For this, something like RSVP-TE
{{RFC3209}} with bandwidth reservation or a centralized controller
architecture computing a globally optimal tunnel layout would be
required.

Instead, this approach is focused on a much more simple, distributed
approach where each node in the graph can compute UCMP weights
independent of all other nodes without requiring additional
communication between these nodes. While not achieving a global
optimum, the traffic distribution using UCMP will still be better than
ECMP in the presence of unequal bandwidth paths.

Problem Statement  {#problem_statement}
=================

{{simple}} shows a sample graph topology with 2 edge nodes, S and T.

~~~~
             bw=400
        A------------C
   200 /|            |\ bw=200
      / |            | \
     S  |400      400|  T
      \ |            | /
   200 \|            |/ bw=100
        B------------D
             bw=400
~~~~
{: #simple title="Sample topology with link bandwidths"}

All numbers are expressing bandwidth. IGP metrics are assumed to be
suitable for ECMP from S to T, i.e. all link metrics equal to 1 would
work. The direction of traffic flow in consideration is from left to
right, from S to T. The setup is symmetrical where edge nodes S and T
are dual-homed to the core (A, B, C, D), except for one asymmetry: the
link D-T on the egress side is degraded to 100 Gbps, whereas all other
edge-core links have a bandwidth of 200 Gbps.

Using regular ECMP procedures, the ingress node S does not consider
the fact that on the egress side the bandwidths are 200:100, upper
vs. lower path, but instead employs a 1:1 loadsharing, sending 50% of
the traffic along the upper path, and 50% along the lower path.

~~~~
                 load=150G
               A------------C
ECMP weight=1 /|            |\ bw=200
             / |            | \
traffic ==> S  |            |  T
300 Gbps     \ |            | /
ECMP weight=1 \|            |/ bw=100
               B------------D  LOSS=50G!
                 load=150G 
~~~~
{: #simple-loss title="Traffic Loss due to ECMP"}

It is easy to see that the given topology could support 300 Gbps S to
T without traffic loss, but using ECMP it is evident in
{{simple-loss}} that 50 Gbps is lost on the lower path because S is
sending half of the total traffic (150 Gpbs) to the lower path.

Minimum Path Bandwidth {#min_path_bw}
----------------------

The goal of using all available paths and utilizing their respective
maximum bandwidth without traffic loss leads to the concept of Minimum
Path Bandwidth (min_path_bw). The Minimum Path Bandwidth is the
minimum bandwidth available on any section along a multihop path from
ingress to egress. As long as traffic imposed on that path from the
ingress does not exceed min_path_bw (and disregarding any others flows
in the network, see {{objective}}), no traffic will be lost.

The Minimum Path Bandwidths (min_path_bw) of the upper and lower path
are shown in {{simple-min-path-bw}}. Instead of using equal weigths as
in ECMP, S should distribute traffic weighted according to the
min_path_bw(s).

~~~~
               min_path_bw=200G
            <------------------->
               A------------C
          200 /|            |\ bw=200
             / |            | \
            S  |            |  T
             \ |            | /
          200 \|            |/ bw=100
               B------------D
            <------------------->
               min_path_bw=100G 
~~~~
{: #simple-min-path-bw title="min_path_bw for upper and lower path"}

As illustrated in {{simple-noloss}}, using UCMP and weighting the
paths according to the respective min_path_bw it is possible to fully
utilize the available 300 Gbps without traffic loss.

~~~~
                 load=200G
               A------------C
UCMP weight=2 /|            |\ bw=200
             / |            | \
traffic ==> S  |            |  T
300 Gbps     \ |            | /
UCMP weight=1 \|            |/ bw=100
               B------------D
                 load=100G 
~~~~
{: #simple-noloss title="No Traffic Loss with UCMP"}

Problem Summary
---------------

The asymmetry or degration of link bandwidth may not be directly at
the source S, but somewhere downstream on the path to destination T.
Using only information about local links at S, S has no knowledge
about degration of either path and can only load-share with equal
weights (1:1), which may lead to traffic loss.

Instead, S should weight traffic according to min_path_bw, which can
be computed from the topology graph if bandwidth information is
available. Such information can be made available in the link-state
IGP by deploying Traffic Engineering Extensions for ISIS {{RFC5305}}
or OSPF {{RFC3630}}.

UCMP Weight Computation
=======================

To compute UCMP weights for source node S for traffic to T, the first
step SHOULD be to compute the multipath SPT to T, resulting in a
Directed Acyclic Graph (DAG) that is a subgraph of the network
topology.

For the sample topology in {{simple}} from {{problem_statement}} the
DAG subgraph is shown in {{dag}}.

~~~~
                     400
               A----------->C
          200 /              \ bw=200
             /                \
            S                  T
             \                /
          200 \              / bw=100
               B----------->D
                     400
~~~~
{: #dag title="DAG subgraph"}

The edges S->A, S->B, C->T and D->T are also directed but this is not
possible to visualize in ASCII art.

All further computations are done on that DAG.
All "n" possible paths from S to T within this DAG SHALL be
enumerated. These paths traverse a total of "m" links.

In this example the list of links (m = 6) with their bandwidths is:

| Link | Bandwidth |
|:-----|----------:|
| S-A  |       200 |
| S-B  |       200 |
| A-C  |       400 |
| B-D  |       400 |
| C-T  |       200 |
| D-T  |       100 |
{: #simple-links title="Link Table"}

The corresponding list of paths (n = 2) with their min_path_bw is:

| Path    | min_path_bw |
|:--------|------------:|
| S-A-C-T |         200 |
| S-B-D-T |         100 |
{: #simple-paths title="Path Enumeration"}

The problem now is to assign bandwidths (x_1, ..., x_n) to each of these
paths such that the aggregate bandwidth is maximized while still not
overloading any link in the DAG.

In this extremely simple example the min_path_bw can be computed
easily by taking the minimum of all the link bandwidths along the
path. 

Unfourtunately this fails for more complex DAGs where the paths
overlap, as can be seen in {{dag-complex}}.

~~~~
                  4
               A-----C
            8 / \2  / \ 5
             /   \ /   \
            S     \     T
             \   / \   /
            8 \ /1  \ / 4
               B-----D
                  2
~~~~
{: #dag-complex title="Complex DAG subgraph"}

Here the list of links (m = 8) with their bandwidths is:

| Link | Bandwidth |
|:-----|----------:|
| S-A  |         8 |
| S-B  |         8 |
| A-C  |         4 |
| A-D  |         2 |
| B-C  |         1 |
| B-D  |         2 |
| C-T  |         5 |
| D-T  |         4 |
{: #complex-links title="Complex Link Table"}

The corresponding list of paths (n = 4) with their min_path_bw is:

| Path    | min_path_bw |
|:--------|------------:|
| S-A-C-T |           4 |
| S-A-D-T |           2 |
| S-B-C-T |           1 |
| S-B-D-T |           2 |
{: #complex-paths title="Complex Path Enumeration"}

x_i denotes the assigned bandwidth of path i.
The vector of path bandwidths is x = (x_1, ..., x_n).

b_i denotes the availabe link bandwidth for link i.
The vector of available link bandwidths is b = (b_1, ..., b_m).

The vector b is known, whereas vector x is unknown and to be computed.

A is a known matrix of coefficients that are 1 if the path traverses
the corresponding link and 0 otherwise.
The matrix multiplication A x yields a vector of numbers that
represent link utilizations.

The constraint of not overloading any link can now be stated in terms
of a matrix multiplication:  A x <= b

The aggregate bandwidth is bw = SUM(i=1..n, x_i). 

The result bw of this function is to be maximized while still
fulfiling the constraint A x <= b.

These types of problems are well-known in mathematics and informatics
and are solved through linear programing (LP). One well-know algorithm
for LP is the simplex algorithm, but there are others as well.

The UCMP computation SHOULD utilize a LP solver to maximize bw under
the given constraints.

The resulting vector x expresses path bandwidths. To determine UCMP
weights, all paths SHALL be grouped by first-hop next-hop and for
each first hop, the bandwidths of all path traversing that hop SHALL
be added together. The resulting bandwidth numbers for each first-hop
can directly be used as UCMP weights.

IANA Considerations
===================

This document has no actions for IANA.

Manageability Considerations
============================

TBD

Security Considerations
=======================

This document does not change the security aspects of IS-IS or OSPF.
Security considerations specific to each protocol still apply. For
more information see {{RFC5304}} and {{RFC2328}}.

Acknowledgments
===============

The author would like to thank Thomas Beckhaus for his comments on
this document.

Comments
========

Comments are solicited and should be addressed to the author at
dws@steinbergnet.net.

{::comment}
Comments are solicited and should be addressed to the working group's
mailing list at ___@______ and/or the author(s).
{:/comment}
